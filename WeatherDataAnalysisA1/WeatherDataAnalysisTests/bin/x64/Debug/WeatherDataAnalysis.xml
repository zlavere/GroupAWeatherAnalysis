<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WeatherDataAnalysis</name>
    </assembly>
    <members>
        <member name="T:WeatherDataAnalysis.App">
            <summary>
                Provides application-specific behavior to supplement the default Application class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.App.#ctor">
            <summary>
                Initializes the singleton application object.  This is the first line of authored code
                executed, and as such is the logical equivalent of main() or WinMain().
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.App.OnLaunched(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)">
            <summary>
                Invoked when the application is launched normally by the end user.  Other entry points
                will be used such as when the application is launched to open a specific file.
            </summary>
            <param name="e">Details about the launch request and process.</param>
        </member>
        <member name="M:WeatherDataAnalysis.App.onNavigationFailed(System.Object,Windows.UI.Xaml.Navigation.NavigationFailedEventArgs)">
            <summary>
                Invoked when Navigation to a certain page fails
            </summary>
            <param name="sender">The Frame which failed navigation</param>
            <param name="e">Details about the navigation failure</param>
        </member>
        <member name="M:WeatherDataAnalysis.App.onSuspending(System.Object,Windows.ApplicationModel.SuspendingEventArgs)">
            <summary>
                Invoked when application execution is being suspended.  Application state is saved
                without knowing whether the application will be terminated or resumed with the contents
                of memory still intact.
            </summary>
            <param name="sender">The source of the suspend request.</param>
            <param name="e">Details about the suspend request.</param>
        </member>
        <member name="M:WeatherDataAnalysis.App.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.App.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.App.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.App.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Controller.AddWeatherInfo">
            <summary>
            Controller for creating a single data point of weather information.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.Controller.AddWeatherInfo.CreatedWeatherInfo">
            <summary>
            Gets the created weather information.
            </summary>
            <value>
            The created weather information.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.AddWeatherInfo.StartDialog">
            <summary>
            Starts the dialog to get user input from which new data will be added to the collection.
            </summary>
            <returns>Returns true if the data element is created successfully.</returns>
        </member>
        <member name="T:WeatherDataAnalysis.Controller.MainPageController">
            <summary>
                Controller for the Import processes.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.Controller.MainPageController" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.WriteActiveInfoToFile(Windows.Storage.StorageFolder)">
            <summary>
            Writes the active information to file.
            </summary>
            <param name="directory">The directory.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.SetUpFormatter">
            <summary>
            Sets up TemperatureDataFormatter.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.SetHistogramBucketSize(System.Int32)">
            <summary>
            Sets the size of the histogram bucket.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.GenerateOutput">
            <summary>
                Generates the output.
            </summary>
            <returns>Generates output for the Active WeatherInfoCollection</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.GenerateOutput(System.Int32)">
            <summary>
                Generates the output with additional analytic functions for month
            </summary>
            <param name="month">The month to analyze</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.loadTemperaturesByMonth(System.Int32)">
            <summary>
            Loads the temperatures by month.
            </summary>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.CreateNewFromFile(Windows.Storage.StorageFile,WeatherDataAnalysis.View.ImportDialog)">
            <summary>
            Creates the new WeatherInfoCollection from selected file asynchronously.
            </summary>
            <param name="file">The file selected by user.</param>
            <param name="importDialog">The import dialog.</param>
            <returns>Asynchronously returns a new WeatherInfoCollection from file data based on user selected preferences.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.SetHighTempThreshold(System.Int32)">
            <summary>
            Sets the high temporary threshold.
            </summary>
            <param name="highTemp">The highTemp.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.SetLowTempThreshold(System.Int32)">
            <summary>
            Sets the low temperature threshold.
            </summary>
            <param name="lowTemp">The low temperature.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.SetMonth(System.Int32)">
            <summary>
            Sets the month to run analysis on.
            </summary>
            <param name="month">The month.</param>
        </member>
        <member name="T:WeatherDataAnalysis.Format.TemperatureDataFormatter">
            <summary>
                Formats Temperature Data
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.Format.TemperatureDataFormatter.WeatherInfoCollection">
            <summary>
                Gets or sets the weather information collection.
            </summary>
            <value>
                The weather information collection.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Format.TemperatureDataFormatter.LowTempThreshold">
            <summary>
                Gets or sets the low temporary threshold.
            </summary>
            <value>
                The low temporary threshold.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Format.TemperatureDataFormatter.HighTempThreshold">
            <summary>
                Gets or sets the high temporary threshold.
            </summary>
            <value>
                The high temporary threshold.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Format.TemperatureDataFormatter.Month">
            <summary>
            Gets or sets the month.
            </summary>
            <value>
            The month.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.Format.TemperatureDataFormatter" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.GetOutput">
            <summary>
                Generates the grouped weather information collections.
            </summary>
            <returns>Analytic output of weather data grouped by Month.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.generateYearOverview">
            <summary>
                Generates the year overview.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.FormatHighPerMonth(System.Int32)">
            <summary>
                Formats the high per month.
            </summary>
            <param name="month">The month.</param>
            <returns>Returns a string formatted for GUI of highest temperature for the month and date(s) it occurred on.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.FormatLowPerMonth(System.Int32)">
            <summary>
                Formats the low per month.
            </summary>
            <param name="month">The month.</param>
            <returns>String for the Lowest Temperature in a given month and Dates that reached that low.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.FormatLowAveragePerMonth(System.Int32)">
            <summary>
                Formats the low average per month.
            </summary>
            <param name="month">The month.</param>
            <returns>String for Average Low in given month.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.FormatHighAveragePerMonth(System.Int32)">
            <summary>
                Formats the high average per month.
            </summary>
            <param name="month">The month.</param>
            <returns>String for Average High in given month.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.createHistograms(System.Collections.Generic.IEnumerable{WeatherDataAnalysis.Model.WeatherInfo})">
            <summary>
                Creates the high Temperatures histogram.
            </summary>
            <returns>String representation of a histogram for High Temperatures</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.getDateString(System.DateTime)">
            <summary>
                Creates the low temperature histogram.
            </summary>
            <returns>String Representation of the Low Temperature Histogram</returns>
        </member>
        <member name="T:WeatherDataAnalysis.Format.WeatherHistogramGenerator">
            <summary>
            Generates high and low temperature histograms based on a collection of weather data.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.Format.WeatherHistogramGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WeatherDataAnalysis.Format.WeatherHistogramGenerator"/> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.Format.WeatherHistogramGenerator.CreateHistogram(System.Collections.Generic.IEnumerable{WeatherDataAnalysis.Model.WeatherInfo})">
            <summary>
            Creates the histogram.
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="T:WeatherDataAnalysis.io.CsvReader">
            <summary>
                Reads CSV file lines
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.io.CsvReader.GetFileLines(Windows.Storage.IStorageFile)">
            <summary>
            Gets the file lines.
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="T:WeatherDataAnalysis.io.TemperatureParser">
            <summary>
                Parser for CSV set of Temperature Data where format is date, high, low.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.io.TemperatureParser.ErrorMessages">
            <summary>
                Gets or sets the error messages.
            </summary>
            <value>
                The error messages.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.io.TemperatureParser.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.io.TemperatureParser" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.io.TemperatureParser.GetWeatherInfoCollection(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
                Gets the day temperature list.
            </summary>
            <param name="name">The name.</param>
            <param name="weatherInfoList">The temporary list.</param>
            <returns></returns>
        </member>
        <member name="T:WeatherDataAnalysis.IO.WriteWeatherDataToCsv">
            <summary>
            Writes Weather Data to a CSV file to save data.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.IO.WriteWeatherDataToCsv.WriteActiveDataToCsv(Windows.Storage.StorageFolder)">
            <summary>
                Writes the active data to CSV.
            </summary>
            <param name="directory">The directory.</param>
        </member>
        <member name="T:WeatherDataAnalysis.MainPage">
            <summary>
                An empty page that can be used on its own or navigated to within a Frame.
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.MainPage.ApplicationHeight">
            <summary>
                The application height
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.MainPage.ApplicationWidth">
            <summary>
                The application width
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.MainPage.#ctor">
            <inheritdoc />
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.MainPage" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.MainPage.executeImport">
            <summary>
                Executes the MainPageController.
            </summary>
            <returns>True if new WeatherInfoCollection is added.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.MainPage.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.MainPage.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.MainPage.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Model.Enums.HistogramBucketSize">
            <summary>
            Enum for the various bucket sizes that histogram can be.
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Model.Enums.HistogramBucketSize.Five">
            <summary>
            5 degrees per bucket.
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Model.Enums.HistogramBucketSize.Ten">
            <summary>
            10 degrees per bucket
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Model.Enums.HistogramBucketSize.Twenty">
            <summary>
            20 degrees per bucket
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Model.Enums.ImportType">
            <summary>
            Enum for ImportTypes
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Model.Enums.ImportType.Merge">
            <summary>
            Indicates that the import should utilize a merging process.
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Model.Enums.ImportType.Overwrite">
            <summary>
            Indicates that the import should utilize an overwrite process.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Model.Enums.Temperature">
            <summary>
            Enum for important temperature values.
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Model.Enums.Temperature.FreezingFahrenheit">
            <summary>
            The freezing point fahrenheit
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Model.Enums.Temperature.HighWarningThreshold">
            <summary>
            The high temperature warning threshold
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Model.FactoryWeatherInfoCollection">
            <summary>
                Factory to create WeatherInfoCollection with common groupings.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.Model.FactoryWeatherInfoCollection.GroupedByMonth">
            <summary>
                Gets the grouped collections.
            </summary>
            <value>
                The grouped collections.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.Model.FactoryWeatherInfoCollection.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.Model.FactoryWeatherInfoCollection" /> class.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Model.WeatherInfo">
            <summary>
                High and low temperature data for a specific day
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfo.HighTemp">
            <summary>
                Gets or sets the high temperature.
            </summary>
            <value>
                The high temperature.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfo.LowTemp">
            <summary>
                Gets the low temperature.
            </summary>
            <value>
                The low temperature.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfo.Date">
            <summary>
                Gets the date.
            </summary>
            <value>
                The date.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfo.#ctor(System.DateTime,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.Model.WeatherInfo" /> class.
            </summary>
            <precondition>High Temp Must be >= lowTemp</precondition>
            <precondition>Date Must be on or before today.</precondition>
            <param name="date">The date.</param>
            <param name="highTemp">The high temperature.</param>
            <param name="lowTemp">The low temperature.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfo.CompareTo(WeatherDataAnalysis.Model.WeatherInfo)">
            <summary>
            Compares to.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="T:WeatherDataAnalysis.Model.WeatherInfoCollection">
            <summary>
                Provides analytic functions for collections of WeatherInfo.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfoCollection.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfoCollection.NameCollectionPair">
            <summary>
                Gets or sets the key value pair.
            </summary>
            <value>
                The key value pair.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfoCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfoCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfoCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:WeatherDataAnalysis.Model.WeatherInfo"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:WeatherDataAnalysis.Model.WeatherInfo"/>.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfoCollection.HighestTemp">
            <summary>
            Gets the highest temperature.
            </summary>
            <value>
            The highest temperature.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfoCollection.LowestTemp">
            <summary>
            Gets the lowest temperature.
            </summary>
            <value>
            The lowest temperature.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.#ctor(System.String,System.Collections.Generic.IList{WeatherDataAnalysis.Model.WeatherInfo})">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.Model.WeatherInfoCollection" /> class.
            </summary>
            <param name="name"></param>
            <param name="weatherInfos">The collection of weather information.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.Add(WeatherDataAnalysis.Model.WeatherInfo)">
            <summary>
                Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.Clear">
            <summary>
                Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.Contains(WeatherDataAnalysis.Model.WeatherInfo)">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
                true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.CopyTo(WeatherDataAnalysis.Model.WeatherInfo[],System.Int32)">
            <summary>
                Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an
                <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements
                copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see>
                must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.Remove(WeatherDataAnalysis.Model.WeatherInfo)">
            <summary>
                Removes the first occurrence of a specific object from the
                <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
                true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>;
                otherwise, false. This method also returns false if item is not found in the original
                <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.IndexOf(WeatherDataAnalysis.Model.WeatherInfo)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.Insert(System.Int32,WeatherDataAnalysis.Model.WeatherInfo)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.GroupByMonth">
            <summary>
                Groups the by month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.FindWithHighest">
            <summary>
                Gets the highest temps.
            </summary>
            <returns>List of Weather with the highest temps.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.FindWithLowest">
            <summary>
            Gets the lowest temps.
            </summary>
            <returns>List of Weather with the lowest temps.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.FindHighestLow">
            <summary>
                Gets the highest low temps.
            </summary>
            <returns>List of Weather with the highest low temps.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.FindLowestHighTemps">
            <summary>
                Gets the lowest high temps.
            </summary>
            <returns>List of Weather with the lowest high temps.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.GetAverageHigh">
            <summary>
                Gets the average high.
            </summary>
            <returns>Average High Temperature for WeatherInfoCollection. Returns Max Integer Value on Error.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.GetAverageLow">
            <summary>
                Gets the average low.
            </summary>
            <returns>Average High Temperature for WeatherInfoCollection</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.GetHighestInMonth(System.Int32)">
            <summary>
                Gets the highest in month.
            </summary>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.GetLowestInMonth(System.Int32)">
            <summary>
                Gets the lowest in month.
            </summary>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.GetHighAverageForMonth(System.Int32)">
            <summary>
                Gets the high average for month.
            </summary>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.GetLowAverageForMonth(System.Int32)">
            <summary>
                Gets the low average for month.
            </summary>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.FindAllAboveHighTempThreshold(System.Int32)">
            <summary>
            Finds all above high temperature threshold.
            </summary>
            <param name="highThreshold">The high threshold.</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.FindAllBelowLowTempThreshold(System.Int32)">
            <summary>
            Finds all below low temperature threshold.
            </summary>
            <param name="lowTempThreshold">The low temperature threshold.</param>
            <returns></returns>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:WeatherDataAnalysis.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
            means that the methos doesn't return normally (throws or terminates the process).<br/>
            Value <c>canbenull</c> is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
            with rows separated by semicolon. There is no notion of order rows, all rows are checked
            for applicability and applied per each program state tracked by R# analysis.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:WeatherDataAnalysis.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:WeatherDataAnalysis.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:WeatherDataAnalysis.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:WeatherDataAnalysis.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:WeatherDataAnalysis.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:WeatherDataAnalysis.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:WeatherDataAnalysis.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:WeatherDataAnalysis.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:WeatherDataAnalysis.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:WeatherDataAnalysis.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:WeatherDataAnalysis.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:WeatherDataAnalysis.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:WeatherDataAnalysis.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:WeatherDataAnalysis.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:WeatherDataAnalysis.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:WeatherDataAnalysis.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:WeatherDataAnalysis.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:WeatherDataAnalysis.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:WeatherDataAnalysis.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:WeatherDataAnalysis.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:WeatherDataAnalysis.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:WeatherDataAnalysis.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:WeatherDataAnalysis.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.NoReorderAttribute">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:WeatherDataAnalysis.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:WeatherDataAnalysis.ViewModel.ActiveWeatherInfoCollection">
            <summary>
            Data binding for the currently active WeatherInformationCollection to be used throughout the application.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.ActiveWeatherInfoCollection.Active">
            <summary>
            Gets or sets the active WeatherInformationCollection.
            </summary>
            <value>
            Sets the WeatherInformationCollection used ubiquitously throughout the application.
            </value>
        </member>
        <member name="T:WeatherDataAnalysis.ViewModel.HistogramSizeComboBoxBindings">
            <summary>
            </summary>
            <seealso cref="T:System.Int32" />
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.HistogramSizeComboBoxBindings.Sizes">
            <summary>
                Gets or sets the options of sizes.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.HistogramSizeComboBoxBindings.ActiveSelection">
            <summary>
                The most recently selected size.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.HistogramSizeComboBoxBindings.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.ViewModel.HistogramSizeComboBoxBindings" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.HistogramSizeComboBoxBindings.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:WeatherDataAnalysis.ViewModel.DataFormatter">
            <summary>
                All Formatters for WeatherInfo
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.DataFormatter.TemperatureDataFormatter">
            <summary>
                Gets or sets the temperature data formatter.
            </summary>
            <value>
                The temperature data formatter.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.DataFormatter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.ViewModel.DataFormatter" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.MainPageViewModel.#ctor">
            <inheritdoc />
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.MainPage" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.MainPageViewModel.executeImport">
            <summary>
                Executes the MainPageController.
            </summary>
            <returns>True if new WeatherInfoCollection is added.</returns>
        </member>
        <member name="T:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding">
            <summary>
                Binding for weather info collections
                can be something like city and year.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.WeatherInfoCollections">
            <summary>
                Gets or sets the weather information collections.
            </summary>
            <value>
                The weather information collections.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:WeatherDataAnalysis.Model.WeatherInfoCollection"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:WeatherDataAnalysis.Model.WeatherInfoCollection"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Add(WeatherDataAnalysis.Model.WeatherInfoCollection)">
            <summary>
                Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Contains(WeatherDataAnalysis.Model.WeatherInfoCollection)">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
                true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.CopyTo(WeatherDataAnalysis.Model.WeatherInfoCollection[],System.Int32)">
            <summary>
                Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an
                <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements
                copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see>
                must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Remove(WeatherDataAnalysis.Model.WeatherInfoCollection)">
            <summary>
                Removes the first occurrence of a specific object from the
                <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
                true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>;
                otherwise, false. This method also returns false if item is not found in the original
                <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Add(System.String,WeatherDataAnalysis.Model.WeatherInfoCollection)">
            <summary>
                Adds an element with the provided key and value to the
                <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.ContainsKey(System.String)">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the
                specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
                true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key;
                otherwise, false.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Remove(System.String)">
            <summary>
                Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
                true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found
                in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.TryGetValue(System.String,WeatherDataAnalysis.Model.WeatherInfoCollection@)">
            <summary>
                Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
                When this method returns, the value associated with the specified key, if the key is found;
                otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.
            </param>
            <returns>
                true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an
                element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Add(System.Collections.Generic.KeyValuePair{System.String,WeatherDataAnalysis.Model.WeatherInfoCollection})">
            <summary>
                Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Clear">
            <summary>
                Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Contains(System.Collections.Generic.KeyValuePair{System.String,WeatherDataAnalysis.Model.WeatherInfoCollection})">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
                true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.CopyTo(System.Collections.Generic.KeyValuePair{System.String,WeatherDataAnalysis.Model.WeatherInfoCollection}[],System.Int32)">
            <summary>
                Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an
                <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements
                copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see>
                must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Remove(System.Collections.Generic.KeyValuePair{System.String,WeatherDataAnalysis.Model.WeatherInfoCollection})">
            <summary>
                Removes the first occurrence of a specific object from the
                <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
                true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>;
                otherwise, false. This method also returns false if item is not found in the original
                <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:WeatherDataAnalysis.View.ImportDialog">
            <summary>
            Dialog to collect user input for the file selected for import.
            </summary>
            <seealso cref="T:Windows.UI.Xaml.Controls.ContentDialog" />
            <seealso cref="T:Windows.UI.Xaml.Markup.IComponentConnector" />
            <seealso cref="T:Windows.UI.Xaml.Markup.IComponentConnector2" />
        </member>
        <member name="P:WeatherDataAnalysis.View.ImportDialog.CollectionName">
            <summary>
            Gets the name of the collection.
            </summary>
            <value>
            The name of the collection.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.View.ImportDialog.ImportType">
            <summary>
            Gets the type of the import.
            </summary>
            <value>
            The type of the import.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.View.ImportDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WeatherDataAnalysis.View.ImportDialog"/> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.ImportDialog.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.ImportDialog.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.ImportDialog.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.View.MergeMatchDialog">
            <summary>
            Displays a dialog to manage Merging preferences when attempting
            to import a second or more files.
            </summary>
            <seealso cref="T:Windows.UI.Xaml.Controls.ContentDialog" />
            <seealso cref="T:Windows.UI.Xaml.Markup.IComponentConnector" />
            <seealso cref="T:Windows.UI.Xaml.Markup.IComponentConnector2" />
        </member>
        <member name="F:WeatherDataAnalysis.View.MergeMatchDialog.Replace">
            <summary>
            The replace button
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.View.MergeMatchDialog.InputResult">
            <summary>
            Gets or sets the input result.
            </summary>
            <value>
            The input result.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.View.MergeMatchDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WeatherDataAnalysis.View.MergeMatchDialog"/> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.MergeMatchDialog.ShowDialog(System.String[])">
            <summary>
            Shows the dialog.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.View.MergeMatchDialog.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.MergeMatchDialog.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.MergeMatchDialog.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.View.NewWeatherInfoDialog">
            <summary>
            Prompt for a specific day's weather information
            </summary>
            <seealso cref="T:Windows.UI.Xaml.Controls.ContentDialog" />
            <seealso cref="T:Windows.UI.Xaml.Markup.IComponentConnector" />
            <seealso cref="T:Windows.UI.Xaml.Markup.IComponentConnector2" />
        </member>
        <member name="F:WeatherDataAnalysis.View.NewWeatherInfoDialog.Submit">
            <summary>
            Submit Button
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.View.NewWeatherInfoDialog.HighTemp">
            <summary>
            Gets the high temporary.
            </summary>
            <value>
            The high temporary.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.View.NewWeatherInfoDialog.LowTemp">
            <summary>
            Gets the low temporary.
            </summary>
            <value>
            The low temporary.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.View.NewWeatherInfoDialog.Date">
            <summary>
            Gets the date.
            </summary>
            <value>
            The date.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.View.NewWeatherInfoDialog.CollectionName">
            <summary>
            Gets the name of the collection.
            </summary>
            <value>
            The name of the collection.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.View.NewWeatherInfoDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WeatherDataAnalysis.View.NewWeatherInfoDialog"/> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.NewWeatherInfoDialog.ShowDialog">
            <summary>
            Shows the dialog.
            </summary>
            <returns>ContentDialogResult asynchronously</returns>
        </member>
        <member name="M:WeatherDataAnalysis.View.NewWeatherInfoDialog.IsOverwriteAllowed">
            <summary>
            Determines whether [is overwrite allowed].
            </summary>
            <returns>
              <c>true</c> if [is overwrite allowed]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.View.NewWeatherInfoDialog.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.NewWeatherInfoDialog.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.NewWeatherInfoDialog.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.View.MasterDetailsWeather">
            <summary>
            An empty page that can be used on its own or navigated to within a Frame.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.MasterDetailsWeather.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.MasterDetailsWeather.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.MasterDetailsWeather.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Program">
            <summary>
            Program class
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.WeatherDataAnalysis_XamlTypeInfo.XamlMetaDataProvider">
            <summary>
            Main class for providing metadata for the app or library
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.WeatherDataAnalysis_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.WeatherDataAnalysis_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.WeatherDataAnalysis_XamlTypeInfo.XamlMetaDataProvider.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
    </members>
</doc>
