<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WeatherDataAnalysis</name>
    </assembly>
    <members>
        <member name="T:WeatherDataAnalysis.App">
            <summary>
                Provides application-specific behavior to supplement the default Application class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.App.#ctor">
            <summary>
                Initializes the singleton application object.  This is the first line of authored code
                executed, and as such is the logical equivalent of main() or WinMain().
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.App.OnLaunched(Windows.ApplicationModel.Activation.LaunchActivatedEventArgs)">
            <summary>
                Invoked when the application is launched normally by the end user.  Other entry points
                will be used such as when the application is launched to open a specific file.
            </summary>
            <param name="e">Details about the launch request and process.</param>
        </member>
        <member name="M:WeatherDataAnalysis.App.onNavigationFailed(System.Object,Windows.UI.Xaml.Navigation.NavigationFailedEventArgs)">
            <summary>
                Invoked when Navigation to a certain page fails
            </summary>
            <param name="sender">The Frame which failed navigation</param>
            <param name="e">Details about the navigation failure</param>
        </member>
        <member name="M:WeatherDataAnalysis.App.onSuspending(System.Object,Windows.ApplicationModel.SuspendingEventArgs)">
            <summary>
                Invoked when application execution is being suspended.  Application state is saved
                without knowing whether the application will be terminated or resumed with the contents
                of memory still intact.
            </summary>
            <param name="sender">The source of the suspend request.</param>
            <param name="e">Details about the suspend request.</param>
        </member>
        <member name="M:WeatherDataAnalysis.App.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.App.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.App.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.App.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Controller.AddWeatherInfo">
            <summary>
                Controller for creating a single data point of weather information.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.Controller.AddWeatherInfo.CreatedWeatherInfo">
            <summary>
                Gets the created weather information.
            </summary>
            <value>
                The created weather information.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.AddWeatherInfo.StartDialog">
            <summary>
                Starts the dialog to get user input from which new data will be added to the collection.
            </summary>
            <returns>Returns true if the data element is created successfully.</returns>
        </member>
        <member name="T:WeatherDataAnalysis.Controller.MainPageController">
            <summary>
                Controller for the Import processes.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.Controller.MainPageController" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.WriteActiveInfoToFile(Windows.Storage.StorageFolder)">
            <summary>
                Writes the active information to file.
            </summary>
            <param name="directory">The directory.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.SetUpFormatter">
            <summary>
                Sets up TemperatureDataFormatter.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.SetHistogramBucketSize(System.Int32)">
            <summary>
                Sets the size of the histogram bucket.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.GenerateOutput">
            <summary>
                Generates the output.
            </summary>
            <returns>Generates output for the Active WeatherInfoCollection</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.GenerateOutput(System.Int32)">
            <summary>
                Generates the output with additional analytic functions for month
            </summary>
            <param name="month">The month to analyze</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.loadTemperaturesByMonth(System.Int32)">
            <summary>
                Loads the temperatures by month.
            </summary>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.CreateNewFromFile(Windows.Storage.StorageFile,WeatherDataAnalysis.View.ImportDialog)">
            <summary>
                Creates the new WeatherInfoCollection from selected file asynchronously.
            </summary>
            <param name="file">The file selected by user.</param>
            <param name="importDialog">The import dialog.</param>
            <returns>Asynchronously returns a new WeatherInfoCollection from file data based on user selected preferences.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.SetHighTempThreshold(System.Int32)">
            <summary>
                Sets the high temporary threshold.
            </summary>
            <param name="highTemp">The highTemp.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.SetLowTempThreshold(System.Int32)">
            <summary>
                Sets the low temperature threshold.
            </summary>
            <param name="lowTemp">The low temperature.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Controller.MainPageController.SetMonth(System.Int32)">
            <summary>
                Sets the month to run analysis on.
            </summary>
            <param name="month">The month.</param>
        </member>
        <member name="T:WeatherDataAnalysis.Converter.OrdinalDateConverter">
            <summary>
                Converts Date string to have an ordinal number for the day of the month.
                Example Format: January 1st, 2019
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.Converter.OrdinalDateConverter.Convert(System.Object,System.Type,System.Object,System.String)">
            <summary>
                Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Converter.OrdinalDateConverter.ConvertBack(System.Object,System.Type,System.Object,System.String)">
            <summary>Converts value back to a date.</summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="language">The language.</param>
            <returns></returns>
        </member>
        <member name="T:WeatherDataAnalysis.Format.TemperatureDataFormatter">
            <summary>
                Formats Temperature Data
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.Format.TemperatureDataFormatter.WeatherInfoCollection">
            <summary>
                Gets or sets the weather information collection.
            </summary>
            <value>
                The weather information collection.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Format.TemperatureDataFormatter.LowTempThreshold">
            <summary>
                Gets or sets the low temporary threshold.
            </summary>
            <value>
                The low temporary threshold.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Format.TemperatureDataFormatter.HighTempThreshold">
            <summary>
                Gets or sets the high temporary threshold.
            </summary>
            <value>
                The high temporary threshold.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Format.TemperatureDataFormatter.Month">
            <summary>
                Gets or sets the month.
            </summary>
            <value>
                The month.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Format.TemperatureDataFormatter.Year">
            <summary>
                Gets or sets the year.
            </summary>
            <value>
                The month.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.Format.TemperatureDataFormatter" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.GetOutput">
            <summary>
                Generates the grouped weather information collections.
            </summary>
            <returns>Analytic output of weather data grouped by Month.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.generateYearOverview">
            <summary>
                Generates the year overview.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.FormatHighPerMonth(System.Int32)">
            <summary>
                Formats the high per month.
            </summary>
            <param name="month">The month.</param>
            <returns>Returns a string formatted for GUI of highest temperature for the month and date(s) it occurred on.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.FormatLowPerMonth(System.Int32)">
            <summary>
                Formats the low per month.
            </summary>
            <param name="month">The month.</param>
            <returns>String for the Lowest Temperature in a given month and Dates that reached that low.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.FormatLowAveragePerMonth(System.Int32)">
            <summary>
                Formats the low average per month.
            </summary>
            <param name="month">The month.</param>
            <returns>String for Average Low in given month.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.FormatHighAveragePerMonth(System.Int32)">
            <summary>
                Formats the high average per month.
            </summary>
            <param name="month">The month.</param>
            <returns>String for Average High in given month.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.createHistograms(System.Collections.Generic.IEnumerable{WeatherDataAnalysis.Model.WeatherInfo})">
            <summary>
                Creates the high Temperatures histogram.
            </summary>
            <returns>String representation of a histogram for High Temperatures</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Format.TemperatureDataFormatter.getDateString(System.DateTime)">
            <summary>
                Creates the low temperature histogram.
            </summary>
            <returns>String Representation of the Low Temperature Histogram</returns>
        </member>
        <member name="T:WeatherDataAnalysis.Format.WeatherHistogramGenerator">
            <summary>
                Generates high and low temperature histograms based on a collection of weather data.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.Format.WeatherHistogramGenerator.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.Format.WeatherHistogramGenerator" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.Format.WeatherHistogramGenerator.CreateHistogram(System.Collections.Generic.IEnumerable{WeatherDataAnalysis.Model.WeatherInfo})">
            <summary>
                Creates the histogram.
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="T:WeatherDataAnalysis.io.FileLineGenerator">
            <summary>
                Reads CSV file lines
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.io.FileLineGenerator.GetFileLines(Windows.Storage.IStorageFile)">
            <summary>
                Gets the file lines.
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
        </member>
        <member name="T:WeatherDataAnalysis.io.TemperatureParser">
            <summary>
                Parser for CSV set of Temperature Data where format is date, high, low.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.io.TemperatureParser.ErrorMessages">
            <summary>
                Gets or sets the error messages.
            </summary>
            <value>
                The error messages.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.io.TemperatureParser.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.io.TemperatureParser" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.io.TemperatureParser.GetWeatherInfoCollection(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
                Gets the day temperature list.
            </summary>
            <param name="name">The name.</param>
            <param name="weatherInfoList">The temporary list.</param>
            <returns></returns>
        </member>
        <member name="T:WeatherDataAnalysis.IO.WriteWeatherDataToCsv">
            <summary>
                Writes Weather Data to a CSV file to save data.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.IO.WriteWeatherDataToCsv.WriteActiveDataToCsv(Windows.Storage.StorageFolder)">
            <summary>
                Writes the active data to CSV.
            </summary>
            <param name="directory">The directory.</param>
        </member>
        <member name="T:WeatherDataAnalysis.IO.XMLSerializer">
            <summary>
            This class contains tools for the serialization, and deserialization of XML files related to weather
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.IO.XMLSerializer.WriteWeatherCollection(WeatherDataAnalysis.Model.WeatherInfoCollection,Windows.Storage.StorageFile)">
            <summary>
            Writes a weather collection to the file specified in an XML format
            </summary>
            <param name="collection">The weather collection to be written as XML</param>
            <param name="file">The file to write the weather collection to</param>
        </member>
        <member name="M:WeatherDataAnalysis.IO.XMLSerializer.ReadWeatherCollection(Windows.Storage.StorageFile)">
            <summary>
            Reads a weather collection to the file specified in an XML format
            </summary>
            <param name="file">The file to read a weather colelction from</param>
            <returns>A weather collection created from the file specified</returns>
        </member>
        <member name="T:WeatherDataAnalysis.MainPage">
            <summary>
                An empty page that can be used on its own or navigated to within a Frame.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.MainPage.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.MainPage" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.MainPage.executeImport">
            <summary>
                Executes the MainPageController.
            </summary>
            <returns>True if new WeatherInfoCollection is added.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.MainPage.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.MainPage.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.MainPage.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Model.Enums.HistogramBucketSize">
            <summary>
                Enum for the various bucket sizes that histogram can be.
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Model.Enums.HistogramBucketSize.Five">
            <summary>
                5 degrees per bucket.
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Model.Enums.HistogramBucketSize.Ten">
            <summary>
                10 degrees per bucket
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Model.Enums.HistogramBucketSize.Twenty">
            <summary>
                20 degrees per bucket
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Model.Enums.ImportType">
            <summary>
                Enum for ImportTypes
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Model.Enums.ImportType.Merge">
            <summary>
                Indicates that the import should utilize a merging process.
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Model.Enums.ImportType.Overwrite">
            <summary>
                Indicates that the import should utilize an overwrite process.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Model.Enums.Temperature">
            <summary>
                Enum for important temperature values.
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Model.Enums.Temperature.FreezingFahrenheit">
            <summary>
                The freezing point fahrenheit
            </summary>
        </member>
        <member name="F:WeatherDataAnalysis.Model.Enums.Temperature.HighWarningThreshold">
            <summary>
                The high temperature warning threshold
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Model.FactoryWeatherInfoCollection">
            <summary>
                Factory to create WeatherInfoCollection with common groupings.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.Model.FactoryWeatherInfoCollection.GroupedByMonth">
            <summary>
                Gets the grouped collections.
            </summary>
            <value>
                The grouped collections.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.Model.FactoryWeatherInfoCollection.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.Model.FactoryWeatherInfoCollection" /> class.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Model.WeatherInfo">
            <summary>
                Data class for Temperature and Precipitation on a specific date.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfo.HighTemp">
            <summary>
                Gets or sets the high temperature.
            </summary>
            <value>
                The high temperature.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfo.LowTemp">
            <summary>
                Gets the low temperature.
            </summary>
            <value>
                The low temperature.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfo.Date">
            <summary>
                Gets the date.
            </summary>
            <value>
                The date.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfo.Precipitation">
            <summary>
                Gets  or sets the precipitation.
            </summary>
            <value>
                The date.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfo.#ctor(System.DateTime,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.Model.WeatherInfo" /> class.
            </summary>
            <precondition>High Temp Must be >= lowTemp</precondition>
            <precondition>Date Must be on or before today.</precondition>
            <param name="date">The date.</param>
            <param name="highTemp">The high temperature.</param>
            <param name="lowTemp">The low temperature.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfo.#ctor(System.DateTime,System.Int32,System.Int32,System.Double)">
            <summary>Initializes a new instance of the <see cref="T:WeatherDataAnalysis.Model.WeatherInfo" /> class.</summary>
            <param name="date">The date.</param>
            <param name="highTemp">The high temporary.</param>
            <param name="lowTemp">The low temporary.</param>
            <param name="precipitation">The measure of precipitation in inches.</param>
            <exception cref="T:System.ArgumentException">Precipitation can't be negative</exception>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfo.CompareTo(WeatherDataAnalysis.Model.WeatherInfo)">
            <summary>
                Compares to.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="T:WeatherDataAnalysis.Model.WeatherInfoCollection">
            <summary>
                Provides analytic functions for collections of WeatherInfo.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfoCollection.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfoCollection.NameCollectionPair">
            <summary>
                Gets or sets the key value pair.
            </summary>
            <value>
                The key value pair.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfoCollection.Count">
            <summary>
                Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfoCollection.IsReadOnly">
            <summary>
                Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfoCollection.Item(System.Int32)">
            <summary>
                Gets or sets the <see cref="T:WeatherDataAnalysis.Model.WeatherInfo" /> at the specified index.
            </summary>
            <value>
                The <see cref="T:WeatherDataAnalysis.Model.WeatherInfo" />.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfoCollection.HighestTemp">
            <summary>
                Gets the highest temperature.
            </summary>
            <value>
                The highest temperature.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfoCollection.LowestTemp">
            <summary>
                Gets the lowest temperature.
            </summary>
            <value>
                The lowest temperature.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfoCollection.MostPrecipitation">
            <summary>
                Gets the highest precipitation.
            </summary>
            <value>
                The highest precipitation.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.Model.WeatherInfoCollection.TotalPrecipitation">
            <summary>
                Gets the total precipitation.
            </summary>
            <value>
                The total precipitation.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.#ctor(System.String,System.Collections.Generic.IList{WeatherDataAnalysis.Model.WeatherInfo})">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.Model.WeatherInfoCollection" /> class.
            </summary>
            <param name="name"></param>
            <param name="weatherInfos">The collection of weather information.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.Add(WeatherDataAnalysis.Model.WeatherInfo)">
            <summary>
                Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.Clear">
            <summary>
                Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.Contains(WeatherDataAnalysis.Model.WeatherInfo)">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
                true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.CopyTo(WeatherDataAnalysis.Model.WeatherInfo[],System.Int32)">
            <summary>
                Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an
                <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements
                copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see>
                must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.Remove(WeatherDataAnalysis.Model.WeatherInfo)">
            <summary>
                Removes the first occurrence of a specific object from the
                <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
                true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>;
                otherwise, false. This method also returns false if item is not found in the original
                <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.IndexOf(WeatherDataAnalysis.Model.WeatherInfo)">
            <summary>
                Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
                The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.Insert(System.Int32,WeatherDataAnalysis.Model.WeatherInfo)">
            <summary>
                Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.RemoveAt(System.Int32)">
            <summary>
                Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.groupByYear">
            <summary>
                Groups the by year.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.GroupByMonth">
            <summary>
                Groups the by month.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.FindWithHighestTemp">
            <summary>
                Gets the highest temps.
            </summary>
            <returns>List of Weather with the highest temps.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.FindWithLowestTemp">
            <summary>
                Gets the lowest temps.
            </summary>
            <returns>List of Weather with the lowest temps.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.FindWithMostPrecipitation">
            <summary>
                Gets the highest precipitation.
            </summary>
            <returns>List of Weather with the highest temps.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.FindHighestLowTemps">
            <summary>
                Gets the highest low temps.
            </summary>
            <returns>List of Weather with the highest low temps.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.FindLowestHighTemps">
            <summary>
                Gets the lowest high temps.
            </summary>
            <returns>List of Weather with the lowest high temps.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.GetAverageHigh">
            <summary>
                Gets the average high.
            </summary>
            <returns>Average High Temperature for WeatherInfoCollection. Returns Max Integer Value on Error.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.GetAverageLow">
            <summary>
                Gets the average low.
            </summary>
            <returns>Average High Temperature for WeatherInfoCollection</returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.GetHighestInMonth(System.Int32)">
            <summary>
                Gets the highest in month.
            </summary>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.GetLowestInMonth(System.Int32)">
            <summary>
                Gets the lowest in month.
            </summary>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.GetHighAverageForMonth(System.Int32)">
            <summary>
                Gets the high average for month.
            </summary>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.GetLowAverageForMonth(System.Int32)">
            <summary>
                Gets the low average for month.
            </summary>
            <param name="month">The month.</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.FindAllAboveHighTempThreshold(System.Int32)">
            <summary>
                Finds all above high temperature threshold.
            </summary>
            <param name="highThreshold">The high threshold.</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Model.WeatherInfoCollection.FindAllBelowLowTempThreshold(System.Int32)">
            <summary>
                Finds all below low temperature threshold.
            </summary>
            <param name="lowTempThreshold">The low temperature threshold.</param>
            <returns></returns>
        </member>
        <member name="T:WeatherDataAnalysis.Extension.CollectionExtensions">
            <summary>
            Extension methods for Collection classes
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.Extension.CollectionExtensions.ToObservableCollection(System.Collections.Generic.IList{WeatherDataAnalysis.Model.WeatherInfo})">
            <summary>
            Converts <paramref name="collection"/> to an ObservableCollection
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.Utility.RelayCommand.OnCanExecuteChanged">
            <summary>
                Typically, protected but made public, so can trigger a manual refresh on the result of CanExecute.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.ViewModel.ActiveWeatherInfoCollection">
            <summary>
                Data binding for the currently active WeatherInformationCollection to be used throughout the application.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.ActiveWeatherInfoCollection.Active">
            <summary>
                Gets or sets the active WeatherInformationCollection.
            </summary>
            <value>
                Sets the WeatherInformationCollection used ubiquitously throughout the application.
            </value>
        </member>
        <member name="T:WeatherDataAnalysis.ViewModel.HistogramSizeComboBoxBindings">
            <summary>
            </summary>
            <seealso cref="T:System.Int32" />
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.HistogramSizeComboBoxBindings.Sizes">
            <summary>
                Gets or sets the options of sizes.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.HistogramSizeComboBoxBindings.ActiveSelection">
            <summary>
                The most recently selected size.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.HistogramSizeComboBoxBindings.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.ViewModel.HistogramSizeComboBoxBindings" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.HistogramSizeComboBoxBindings.GetEnumerator">
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:WeatherDataAnalysis.ViewModel.DataFormatter">
            <summary>
                All Formatters for WeatherInfo
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.DataFormatter.TemperatureDataFormatter">
            <summary>
                Gets or sets the temperature data formatter.
            </summary>
            <value>
                The temperature data formatter.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.DataFormatter.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.ViewModel.DataFormatter" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.MainPageViewModel.#ctor">
            <inheritdoc />
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.MainPage" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.MainPageViewModel.executeImport">
            <summary>
                Executes the MainPageController.
            </summary>
            <returns>True if new WeatherInfoCollection is added.</returns>
        </member>
        <member name="T:WeatherDataAnalysis.ViewModel.SummaryViewModel">
            <summary>
                Data bindings between summary and relevant data classes.
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.SummaryViewModel.AllCollections">
            <summary>
                Gets or sets all collections.
            </summary>
            <value>
                All collections.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.SummaryViewModel.ActiveCollection">
            <summary>
            Gets or sets the active collection.
            </summary>
            <value>
            The active collection.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.SummaryViewModel.DisplayCollection">
            <summary>
            Gets or sets the display collection.
            </summary>
            <value>
            The display collection.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.SummaryViewModel.HighestTempDates">
            <summary>
                Gets or sets the highest temps in active collection.
            </summary>
            <value>
                The highest temps in active collection.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.SummaryViewModel.LowestTempDates">
            <summary>
            Gets the lowest temps in active collection.
            </summary>
            <value>
            The lowest temps in active collection.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.SummaryViewModel.LowestHighTempDates">
            <summary>
            Gets the dates with the lowest high temp
            </summary>
            <value>
            The dates with the lowest high temp
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.SummaryViewModel.HighestLowTempDates">
            <summary>
            Gets the date(s) with highest low temp.
            </summary>
            <value>
            The date(s) with highest low temp.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.SummaryViewModel.HighTempAboveThresholdDates">
            <summary>
            Gets the high temp above threshold dates.
            </summary>
            <value>
            The high temp above threshold dates.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.SummaryViewModel.LowTempBelowThresholdDates">
            <summary>
            Gets the low temps below threshold dates.
            </summary>
            <value>
            The low temps below threshold dates.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.SummaryViewModel.MostPrecipitationDates">
            <summary>
            Gets the most precipitation dates.
            </summary>
            <value>
            The most precipitation dates.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.SummaryViewModel.HighTempThreshold">
            <summary>
            Gets or sets the high temp threshold.
            </summary>
            <value>
            The high temp threshold.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.SummaryViewModel.LowTempThreshold">
            <summary>
            Gets or sets the low temp threshold.
            </summary>
            <value>
            The low temp threshold.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.SummaryViewModel.AverageHighTemp">
            <summary>
            Gets the average high temperature.
            </summary>
            <value>
            The average high temperature.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.SummaryViewModel.AverageLowTemp">
            <summary>
            Gets the average low temperature.
            </summary>
            <value>
            The average low temperature.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.SummaryViewModel.TotalPrecipitation">
            <summary>
            Total precipitation in collection.
            </summary>
            <value>
            The total precipitation.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.SummaryViewModel.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.ViewModel.SummaryViewModel" /> class.
            </summary>
        </member>
        <member name="E:WeatherDataAnalysis.ViewModel.SummaryViewModel.PropertyChanged">
            <summary>
                Occurs when a property value changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.SummaryViewModel.OnPropertyChanged(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding">
            <summary>
                Binding for all available collections of weather data.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.WeatherInfoCollections">
            <summary>
                Gets or sets the weather information collections.
            </summary>
            <value>
                The weather information collections.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Keys">
            <inheritdoc />
            <summary>
                Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the
                <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Values">
            <inheritdoc />
            <summary>
                Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the
                <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Count">
            <summary>
                Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.IsReadOnly">
            <summary>
                Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Item(System.String)">
            <inheritdoc />
            <summary>
                Gets or sets the <see cref="T:WeatherDataAnalysis.Model.WeatherInfoCollection" /> with the specified <paramref name="key"/>.
            </summary>
            <value>
                The <see cref="T:WeatherDataAnalysis.Model.WeatherInfoCollection" />.
            </value>
            <param name="key">The key.</param>
            <returns>The collection with <paramref name="key"/>.</returns>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Add(WeatherDataAnalysis.Model.WeatherInfoCollection)">
            <summary>
                Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Contains(WeatherDataAnalysis.Model.WeatherInfoCollection)">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
                True if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.CopyTo(WeatherDataAnalysis.Model.WeatherInfoCollection[],System.Int32)">
            <summary>
                Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an
                <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements
                copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see>
                must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Remove(WeatherDataAnalysis.Model.WeatherInfoCollection)">
            <summary>
                Removes the first occurrence of a specific object from the
                <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
                true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>;
                otherwise, false. This method also returns false if item is not found in the original
                <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Add(System.String,WeatherDataAnalysis.Model.WeatherInfoCollection)">
            <summary>
                Adds an element with the provided key and value to the
                <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.ContainsKey(System.String)">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the
                specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
                true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key;
                otherwise, false.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Remove(System.String)">
            <summary>
                Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
                true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found
                in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.TryGetValue(System.String,WeatherDataAnalysis.Model.WeatherInfoCollection@)">
            <inheritdoc />
            <summary>
                Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
                When this method returns, the value associated with the specified key, if the key is found;
                otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.
            </param>
            <returns>
                true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an
                element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Add(System.Collections.Generic.KeyValuePair{System.String,WeatherDataAnalysis.Model.WeatherInfoCollection})">
            <inheritdoc />
            <summary>
                Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Clear">
            <summary>
                Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Contains(System.Collections.Generic.KeyValuePair{System.String,WeatherDataAnalysis.Model.WeatherInfoCollection})">
            <inheritdoc />
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
                true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.CopyTo(System.Collections.Generic.KeyValuePair{System.String,WeatherDataAnalysis.Model.WeatherInfoCollection}[],System.Int32)">
            <inheritdoc />
            <summary>
                Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an
                <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements
                copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see>
                must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.Remove(System.Collections.Generic.KeyValuePair{System.String,WeatherDataAnalysis.Model.WeatherInfoCollection})">
            <inheritdoc />
            <summary>
                Removes the first occurrence of a specific object from the
                <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
                true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>;
                otherwise, false. This method also returns false if item is not found in the original
                <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.GetEnumerator">
            <inheritdoc />
            <summary>
                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="E:WeatherDataAnalysis.ViewModel.WeatherInfoCollectionsBinding.MapChanged">
            <inheritdoc />
            <summary>
            Occurs when the map changes.
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.View.ImportDialog">
            <summary>
                Dialog to collect user input for the file selected for import.
            </summary>
            <seealso cref="T:Windows.UI.Xaml.Controls.ContentDialog" />
            <seealso cref="T:Windows.UI.Xaml.Markup.IComponentConnector" />
            <seealso cref="T:Windows.UI.Xaml.Markup.IComponentConnector2" />
        </member>
        <member name="P:WeatherDataAnalysis.View.ImportDialog.CollectionName">
            <summary>
                Gets the name of the collection.
            </summary>
            <value>
                The name of the collection.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.View.ImportDialog.ImportType">
            <summary>
                Gets the type of the import.
            </summary>
            <value>
                The type of the import.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.View.ImportDialog.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.View.ImportDialog" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.ImportDialog.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.ImportDialog.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.ImportDialog.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.View.MergeMatchDialog">
            <summary>
                Displays a dialog to manage Merging preferences when attempting
                to import a second or more files.
            </summary>
            <seealso cref="T:Windows.UI.Xaml.Controls.ContentDialog" />
            <seealso cref="T:Windows.UI.Xaml.Markup.IComponentConnector" />
            <seealso cref="T:Windows.UI.Xaml.Markup.IComponentConnector2" />
        </member>
        <member name="F:WeatherDataAnalysis.View.MergeMatchDialog.Replace">
            <summary>
                The replace button
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.View.MergeMatchDialog.InputResult">
            <summary>
                Gets or sets the input result.
            </summary>
            <value>
                The input result.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.View.MergeMatchDialog.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.View.MergeMatchDialog" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.MergeMatchDialog.ShowDialog(System.String[])">
            <summary>
                Shows the dialog.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:WeatherDataAnalysis.View.MergeMatchDialog.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.MergeMatchDialog.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.MergeMatchDialog.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.View.NewWeatherInfoDialog">
            <summary>
                Prompt for a specific day's weather information
            </summary>
            <seealso cref="T:Windows.UI.Xaml.Controls.ContentDialog" />
            <seealso cref="T:Windows.UI.Xaml.Markup.IComponentConnector" />
            <seealso cref="T:Windows.UI.Xaml.Markup.IComponentConnector2" />
        </member>
        <member name="F:WeatherDataAnalysis.View.NewWeatherInfoDialog.Submit">
            <summary>
                Submit Button
            </summary>
        </member>
        <member name="P:WeatherDataAnalysis.View.NewWeatherInfoDialog.HighTemp">
            <summary>
                Gets the high temporary.
            </summary>
            <value>
                The high temporary.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.View.NewWeatherInfoDialog.LowTemp">
            <summary>
                Gets the low temporary.
            </summary>
            <value>
                The low temporary.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.View.NewWeatherInfoDialog.Date">
            <summary>
                Gets the date.
            </summary>
            <value>
                The date.
            </value>
        </member>
        <member name="P:WeatherDataAnalysis.View.NewWeatherInfoDialog.CollectionName">
            <summary>
                Gets the name of the collection.
            </summary>
            <value>
                The name of the collection.
            </value>
        </member>
        <member name="M:WeatherDataAnalysis.View.NewWeatherInfoDialog.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WeatherDataAnalysis.View.NewWeatherInfoDialog" /> class.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.NewWeatherInfoDialog.ShowDialog">
            <summary>
                Shows the dialog.
            </summary>
            <returns>ContentDialogResult asynchronously</returns>
        </member>
        <member name="M:WeatherDataAnalysis.View.NewWeatherInfoDialog.IsOverwriteAllowed">
            <summary>
                Determines whether [is overwrite allowed].
            </summary>
            <returns>
                <c>true</c> if [is overwrite allowed]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WeatherDataAnalysis.View.NewWeatherInfoDialog.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.NewWeatherInfoDialog.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.NewWeatherInfoDialog.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.View.MasterDetailsWeather">
            <summary>
                An empty page that can be used on its own or navigated to within a Frame.
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.MasterDetailsWeather.InitializeComponent">
            <summary>
            InitializeComponent()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.MasterDetailsWeather.Connect(System.Int32,System.Object)">
            <summary>
            Connect()
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.View.MasterDetailsWeather.GetBindingConnector(System.Int32,System.Object)">
            <summary>
            GetBindingConnector(int connectionId, object target)
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.Program">
            <summary>
            Program class
            </summary>
        </member>
        <member name="T:WeatherDataAnalysis.WeatherDataAnalysis_XamlTypeInfo.XamlMetaDataProvider">
            <summary>
            Main class for providing metadata for the app or library
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.WeatherDataAnalysis_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.Type)">
            <summary>
            GetXamlType(Type)
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.WeatherDataAnalysis_XamlTypeInfo.XamlMetaDataProvider.GetXamlType(System.String)">
            <summary>
            GetXamlType(String)
            </summary>
        </member>
        <member name="M:WeatherDataAnalysis.WeatherDataAnalysis_XamlTypeInfo.XamlMetaDataProvider.GetXmlnsDefinitions">
            <summary>
            GetXmlnsDefinitions()
            </summary>
        </member>
    </members>
</doc>
